#
#   ~/.bashrc: executed by bash for non-login shells.
#
#   examples in package bash-doc in
#     /usr/share/doc/bash/examples/startup-files
#
. ~/.tq84-dotfile-sequence .bashrc

. ~/.tq84-dotfile-log .bashrc: "\$- = $-" >> ~/.dotfile-sequence.log


if [[ "$-" != *i* ]]; then # { Check for interactive execution
# If not running interactively, don't do anything.
# .bashrc is also read during non-interactive SSH command
# execution which is why it has a check at the beginning
#
# Alternative check:
#    case $- in
#         *i*)       ;;
#           *) return;;
#    esac
#

  .tq84-dotfile-log .bashrc "is not running interactively, so returning"
  return

fi # }

. ~/.tq84-dotfile-log .bashrc "Apparently running interactively, going on with script"

set -o vi


# 2017-01-13
#
# history command number?
# PS1="\[\033[0;34m\]\w \[\033[0;35m\]\! \[\033[0m\]>"
#
# PS1 {
# username @ hostname

. ~/.tq84-dotfile-log .bashrc: \$TERM=$TERM >> ~/.dotfile-sequence.log
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

if [ "$color_prompt" = yes ]; then
#   PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
#
    PS1="\[\e]0;\w\a\]\n\[\e[32m\]\u@\h \[\e[33m\]\w\[\e[0m\]\n\! \$ "
#               \w set xterm's title to current working dir ???
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt
# }

export_var_if_dir_exists() { # {
  local dir=$1
  local var=$2

  if [[ -d "$dir" ]]; then
      export $var="$dir"
      . ~/.tq84-dotfile-log .bashrc "$dir exists, exported $var to $dir"
  else
      . ~/.tq84-dotfile-log .bashrc "$dir does not exist, not exporting $var"
  fi
} # }

export_var_if_dir_exists ~/localgit/            git_work_dir
export_var_if_dir_exists ~/Digitales-Backup/    digitales_backup
export_var_if_dir_exists ~/LDP/                 ldp_dir
export_var_if_dir_exists ~/renenyffenegger.ch/  rn_root


if [ -d ${github_top_root}lib/scripts ]; then # {
  . ~/.tq84-dotfile-log .bashrc "${github_top_root}lib/scripts exits, adding it to PATH"
  export PATH=${github_top_root}lib/scripts:$PATH
else
  . ~/.tq84-dotfile-log .bashrc "${github_top_root}lib/scripts does not exist"
fi # }

if [ -d ~/localgit/scripts ]; then # { add ~/localgit/scripts to PATH
  export PATH=~/localgit/scripts:$PATH
fi # }


if [ -d /media/rene/TOSHIBA\ EXT/git ]; then # { git_local_repo_dir, hd_mount_point
  . ~/.tq84-dotfile-log .bashrc "/media/rene/TOSHIBA EXT/git exists, exporting hd_mount_point"
  export hd_mount_point=/media/rene/TOSHIBA\ EXT/
elif [ -d /mnt/E/git ]; then # T420
  . ~/.tq84-dotfile-log .bash_rc "/mnt/E exists, exporting hd_mount_point"
  export hd_mount_point=/mnt/E/
elif [ -d /cygdrive/f/git ]; then
  . ~/.tq84-dotfile-log .bash_rc "/cygdrive/f/git exists, exporting hd_mount_point"
  export hd_mount_point=/cygdrive/f/git/
elif [ -d /cygdrive/x/git ]; then
  . ~/.tq84-dotfile-log .bash_rc "/cygdrive/x/git exists, exporting hd_mount_point"
  export hd_mount_point=/cygdrive/x/git/
fi # }

export git_local_repo_dir=${hd_mount_point}git/

# 2018-01-31: Oracle {
if [ "$ORACLE_HOME" ]; then
  . ~/.tq84-dotfile-log .bashrc "ORACLE_HOME exists setting some aliases"

  alias sqlplus="rlwrap -r sqlplus "
  alias diag="cd $ORACLE_BASE/diag/rdbms/$ORACLE_UNQNAME/$ORACLE_SID/trace"

fi # }
if command -v R > /dev/null; then # {
  . ~/.tq84-dotfile-log .bashrc "R executable found"
  r() {
    if [[ -z "$1" ]]; then
    #  starting an r session
       R --no-save
    else
    #  starting an r script
       R --vanilla --slave -f "$1"
    fi
  }

fi # }

# shopt {

# Ignore case of files in shell {
#   http://unix.stackexchange.com/a/48773/6479
shopt -s nocaseglob
# same thing in
#   yash:
#     set +o case-glob
#   zsh:
#     unsetopt CASE_GLOB
# }

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# Enable programmable completion features {
#
#   Possible already enabled through /etc/bash.bashrc or
#   /etc/profile

if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# }


# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# }

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# ? # set variable identifying the chroot you work in (used in the prompt below)
# ? if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
# ?     debian_chroot=$(cat /etc/debian_chroot)
# ? fi

# { History

export HISTIGNORE='*TQ84*'

# Don't put duplicate lines or lines starting with space in the history.
# Apparently, more options would be possible.
export HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

HISTSIZE=1000
HISTFILESIZE=2000

# }

if   [ "$(uname)" == "Darwin" ]; then # { Mac OS
    :

# }
elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then # {

  alias v='gvim'

# 2017-07-23: Don't try to load change-layout if running cygwin - only if running Linux.
  if [ -e ${github_root}PostLinuxInstallation/keyboard/X/change-layout.sh ]; then # { key -> change-layout.sh
    alias key='${github_root}PostLinuxInstallation/keyboard/X/change-layout.sh'
#   ${github_root}PostLinuxInstallation/keyboard/X/change-layout.sh
  else
    echo ${github_root}PostLinuxInstallation/keyboard/X/change-layout.sh does not exist!
  fi # }

# }
# elif [ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ]; then # { MSYS
# 2016-12-28: Is this elif (MINGW32_NT) still useful?
#
#      # ----- Windows NT platform.
#      #
#      # Assuming it's msys
#      # TODO: is it always Msys?
#
#   #  Make sure that Git does not always say
#   # «WARNING: terminal is not fully functional»
#
#      export TERM=msys
#
# # }
elif [ "$(uname -o)"  == "Cygwin" ] || [ "$(uname -o)" == "Msys" ]; then # {

    . ~/.tq84-dotfile-log .bashrc "uname -o is $(uname -o), special processing for cygwin or msys, \$OSTYPE=$OSTYPE"
 
#  TODO
#    Compare condition above with
#       if [[ $OSTYPE == *cygwin* ]]; then
#       fi

   # 2016-12-28: Allow backspace in «vi mode» to erase letter to the left:
   # 2016-12-29: Note, mintty.exe has the option »Backarrow sends ^H« (under Keys).
   #             Using this option might render the stty erase ^? unnecessary.
   stty erase ^?

   # 2016-12-29: vim doesn't seem to set MYVIMRC if started with -u
   #             Therefore, it's set from the outside
   alias v='MYVIMRC=~/.vim/vimrc vim  -u ~/.vim/vimrc'

   alias dospath='cygpath -w `pwd`'
   alias pc='dospath > /dev/clipboard'
   alias c:='cd /cygdrive/c'

   if [ "$(uname -o)" == "Msys"   ]; then # {
      #
      #  Set MSYS variable to llow to create symbolic links in msys.
      #  Apparently, in order for this to work, it requires elevated mode.
      #
        export MSYS=winsymlinks:nativestrict 

   fi # }
   if [ "$(uname -o)" == "Cygwin" ]; then # {
     alias gvim='gvim -u ~/.vim/vimrc'
     export DISPLAY=:0.0
   fi # }

fi # }

# Alias {

alias ls='ls --color=auto'
alias ll='ls -lFh'
alias la='ls -lFA'

alias info='info --vi-keys'
alias gitp=". gitp.sh"
alias gitl="git-pull.pl"
alias gits="git status ."
alias yt2mp3='youtube-dl --extract-audio --audio-format mp3 $1'
alias yt2mp4='youtube-dl --merge-output-format mp4 $1'
alias cdvimf='cd ~/.vim'
alias cdnot='cd $github_root/notes/notes'
alias cdhyd='cd $github_root/Hydroplattentheorie'
alias cdldp='cd $ldp_dir'
alias cdloc='cd ~/localgit'
alias cdkom='cd ${github_root}Bibelkommentare'
alias abc='abc.sh'
alias ghr='ghr.pl'
alias rs='Rscript'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# }
# Functions {

function fb() { # http://unix.stackexchange.com/questions/278732/is-there-a-standard-abbreviation-for-find-name-foo-or-do-i-need-a-function
  find . -iname "$1"
} # }

function mdcd() { # mkdir and cd into it
  dir=$1

  if [ -e "$dir" ]; then
    echo "File or directory $dir already exists";
    return
  fi

  mkdir "$dir"
  cd    "$dir"
} # }

function vwh() { # view (executable) script
  local f=$(which $1)
  if [ ! -f "$f" ]; then
     echo "File $f does not exist"
     return
  fi

  v "$f"
} # }

removeLastPartOfPath() { # {

  # If READLINE_LINE ends on something like $SOMETHING/foo/bar/baz
  # $SOMETHING/foo/bar is assigned to READLINE_LINE.
  #
  # Used together with key binding to ctrl-q below.

  if [[ $READLINE_LINE =~ (.*)/ ]]; then
     READLINE_LINE="${BASH_REMATCH[1]}"
  fi
} # }

# Trying to bind ctlr-q to removeLastPartOfPath {
# 
#     ctrl-q is used by the tty for flow control (xon/xoff).
#     I couldn't care less (at least momentarely), so
#     flow control is turned off (stty -ixon) in order to make it possible
#     to bind ctrl-q to a function
#
stty -ixon

bind -x '"\C-q": removeLastPartOfPath'

# }

# }

#    https://stackoverflow.com/a/821226/180275
# bind TAB:insert-completions
#    default seems to be
# bin TAB:complete
